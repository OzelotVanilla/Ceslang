//This is a demo of cesno generics.

//Cesno's generics grammar is similar to Java but there is still many difference between them.
//Cesno keeps generics values to runtime. It means you can create generics objects and generics arrays anywhere. That's amazing.
//Generics is the VALUEs in the "<>" and they are limited by the logic expression typed array.
//The generics value must make all elements of the array appears true.

public class Matrix <L, H> : [Int.isInstance(L) && L >= 0, Int.isInstance(H) && H >= 0]
{
    public constructor(Array<Array<Double, H>, L> data);//This is just a demo, so I don't implement it.

    //It is a good habit to put each generics value's expressions to one element but you don't need to always do that.
    //Because sometimes this habit isn't proper and makes your code messy.
    public <X, Y> : [Int.isInstance(X), 0 <= X, X <= L, Int.isInstance(Y), 0 <= Y, Y <= H] Double get();

    public Matrix<L, H> add(Matrix<L, H> with);
}